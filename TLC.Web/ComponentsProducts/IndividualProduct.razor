@inject IBasketService basketService

<div class="card border-dark mt-4 rounded-sm">
    <div class="card-horizontal">
        <div class="card-body d-flex flex-column">
            <div class="container">
                <div class="row">

                    <div class="col-8 product-details">
                        <div class="row justify-content-between">
                            <div class="col-6">
                                <h6 class="card-title"><b>@Product.Name.ToUpper()</b></h6>
                            </div>

                            <div class="col-3 item-price">
                                <h6 class="card-title"><b>£@Product.Price</b></h6>
                            </div>
                        </div>

                        <p class="card-text"> <b>Pieces: @Product.Pieces</b></p>
                        <p class="card-text">@Product.Description</p>

                        @if (Product.Limit - Product.Sold < 1)
                        {
                            <button type="button" class="add-basket align-self-end btn btn-outline-dark btn-sm rounded-pill mt-2" disabled>
                                <b>SOLD OUT</b>
                            </button>}
                        else
                        {
                            <button type="button" class="add-basket align-self-end btn btn-dark btn-sm rounded-pill mt-2"
                                    @onclick="@(() => AddProduct())">
                                <b>ADD TO BASKET</b>
                            </button>
                        }

                    </div>

                    <div class="col-4">
                        <div class="img-square-wrapper mt-1 mb-1">
                            <img class="img-fluid" src="@Product.ImageUrl" alt="Card image cap" style="width: 15rem;">
                        </div>
                    </div>

                </div>



            </div>
        </div>

    </div>

</div>



@code
{ 
    [Parameter] public Product Product { get; set; }
    [Parameter] public int BasketId { get; set; }

    // rename to product added
    // setting method as parameter that was passed to component
    [Parameter] public EventCallback<Basket> OnProductAdded { get; set; }

    // create add product method
    // carry out business logic
    // invoke add product
    // add product to service and return basket
    // invoke callback
    private async Task AddProduct()
    {
        var basketItem = basketService.AddProduct(BasketId, Product.Id);
        var basket = basketService.GetBasket(BasketId);
        await OnProductAdded.InvokeAsync(basket);
    }


}
