@inject IProductService productService
@inject NavigationManager navManager

<div class="container mt-6">
    <div class="row">
        <div class="col-6">
            <h6 class="card-title mt-2"><b>CURRENT MENU</b></h6>
        </div>
        @*<div class="col-6 d-flex">
            <button type="button" class="add-product btn btn-dark btn-sm rounded-pill align-self-end mt-2 ml-auto mb-2"
                    @onclick="@(() => NewProduct())">
                <b>+ NEW PRODUCT</b>
            </button>
        </div>*@
    </div>


    <table class="table table-hover">
        <thead>
            <tr>
                <th class="col-1">ID</th>
                <th class="col-2">Name</th>
                <th class="col">Description</th>
                @*<th class="col-1">Sold</th>
                <th class="col-1">Left</th>*@
                <th></th>
            </tr>
        </thead>
        <tbody class="thead">
            @if (products != null && products.Count() > 0)
            {
                @foreach (var product in products)
                {


                    <ArchivedMenuItem EachProduct="product"></ArchivedMenuItem>

                }
            }
            else
            {
                <tr>
                    <td colspan="3">
                        <h6>You have no products!</h6>
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>


@code {
    private IList<Product> products = new List<Product>();

    protected override void OnInitialized()
    {
        // decoupling component from data thanks to DI, data comes from a service
        // good software architecture
        products = productService.GetArchived();
        // basket = basketService.CreateBasket();
    }

    private void NewProduct()
    {
        navManager.NavigateTo($"order-management/new-product");
    }


}
